{"meta":{"title":"Ally","subtitle":"","description":"学习,吃饭,睡觉,学习...","author":"Abruptrainlover","url":"http://Abruptrainlover.io","root":"/"},"pages":[{"title":"archives","date":"2022-01-12T14:50:24.000Z","updated":"2022-01-12T14:52:08.734Z","comments":true,"path":"archives/index.html","permalink":"http://abruptrainlover.io/archives/index.html","excerpt":"","text":""},{"title":"分类","date":"2022-01-12T15:01:27.000Z","updated":"2022-01-12T15:02:02.836Z","comments":true,"path":"categories/index.html","permalink":"http://abruptrainlover.io/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2022-01-12T14:50:37.000Z","updated":"2022-01-12T14:52:28.489Z","comments":true,"path":"about/index.html","permalink":"http://abruptrainlover.io/about/index.html","excerpt":"","text":""},{"title":"commonweal","date":"2022-01-12T14:51:17.000Z","updated":"2022-01-12T14:51:45.334Z","comments":true,"path":"commonweal/index.html","permalink":"http://abruptrainlover.io/commonweal/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-01-12T14:45:28.000Z","updated":"2022-01-12T14:47:21.685Z","comments":true,"path":"tags/index.html","permalink":"http://abruptrainlover.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"数据类型与运算符 基础","date":"2022-03-02T06:47:35.281Z","updated":"2022-03-01T15:31:33.157Z","comments":true,"path":"2022/03/02/数据类型与运算符 基础/","link":"","permalink":"http://abruptrainlover.io/2022/03/02/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6%20%E5%9F%BA%E7%A1%80/","excerpt":"","text":"Java数据类型与运算符 数据类型Java语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。 byte****：· byte 数据类型是8位、有符号的，以二进制补码表示的整数； · 最小值是 -128**（-2^7**）； · 最大值是 127（2^7-1****）； · 默认值是 0； · byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一； · 例子：byte a = 100，byte b = -50。 short****：· short 数据类型是 16 位、有符号的以二进制补码表示的整数 · 最小值是 -32768**（-2^15**）； · 最大值是 32767（2^15 - 1****）； · Short 数据类型也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一； · 默认值是 0； · 例子：short s = 1000，short r = -20000。 int****：· int 数据类型是32位、有符号的以二进制补码表示的整数； · 最小值是 -2,147,483,648**（-2^31**）； · 最大值是 2,147,483,647（2^31 - 1****）； · 一般地整型变量默认为 int 类型； · 默认值是 0 ； · 例子：int a = 100000, int b = -200000。 long****：· long 数据类型是 64 位、有符号的以二进制补码表示的整数； · 最小值是 -9,223,372,036,854,775,808**（-2^63**）； · 最大值是 9,223,372,036,854,775,807（2^63 -1****）； · 这种类型主要使用在需要比较大整数的系统上； · 默认值是 0L； · 例子： long a = 100000L，Long b = -200000L。 “L”理论上不分大小写，但是若写成”l”容易与数字”1”混淆，不容易分辩。所以最好大写。 float****：· float 数据类型是单精度、32位、符合IEEE 754标准的浮点数； · float 在储存大型浮点数组的时候可节省内存空间； · 默认值是 0.0f； · 浮点数不能用来表示精确的值，如货币； · 例子：float f1 = 234.5f。 ​ 注意：浮点型默认为double，float要加f标识。 double****：· double 数据类型是双精度、64 位、符合 IEEE 754 标准的浮点数； · 浮点数的默认类型为 double 类型； · double类型同样不能表示精确的值，如货币； · 默认值是 0.0d； 注意事项 1:有多种类型的数据混合运算时,系统首先自动将所有数据转换成容器最大的那种数据类型,然后在进行运算. 2:当我们把精度大的数据类型赋值给精度小的数据类型时,会报错.反之就会进行自动类型转换. 3:byte,short,char 三者之间可以进行计算,但在计算时首先转换成int 类型.(所以其计算值要付给int以及比int类型大的数据类型) 4:byte short, char 不会相互自动转换. 5:Boolean:不参与转换. 6:自动转换原则:表达式结果的类型自动提升为 操作中最大的数据类型. 7:数据细节:例如double num = 8.1/3(或者3.0); 结果不为2.7,而是2.69999997. 原因:二进制计算问题. 8:强制转换不进行四舍五入,而是强制删去后位 9:强制转换只能对最近的操作符使用 例如:int x = (int)(10*3.5+62.9); 运算符算术运算符+ - * / % ++ - -关系运算符​ == ！= &gt; &lt; &gt;= &lt;= 位运算符​ &amp; | ^（取同） ​ ~（反转） ​ &lt;&lt; 左移 （后接位数，例A&lt;&lt;2) ​ “&gt;&gt;”(右移) ​ &gt;&gt;&gt;(按位右移补零操作符)(与&gt;&gt;区别是补零) 逻辑运算符​ &amp;&amp; 逻辑与 ​ || 逻辑或 ​ ! 逻辑非 赋值运算符其他运算符​ &amp;&amp; 逻辑与 机制： 先判定前，前错直接结束 运算符优先级","categories":[],"tags":[]},{"title":"","slug":"标识符","date":"2022-03-02T06:47:35.279Z","updated":"2022-03-01T13:25:49.116Z","comments":true,"path":"2022/03/02/标识符/","link":"","permalink":"http://abruptrainlover.io/2022/03/02/%E6%A0%87%E8%AF%86%E7%AC%A6/","excerpt":"","text":"标识符","categories":[],"tags":[]},{"title":"try","slug":"try","date":"2022-01-13T02:45:38.000Z","updated":"2022-01-13T04:13:01.848Z","comments":true,"path":"2022/01/13/try/","link":"","permalink":"http://abruptrainlover.io/2022/01/13/try/","excerpt":"我展示的是一级标题我也是一级标题我展示的是二级标题我也是二级标题","text":"我展示的是一级标题我也是一级标题我展示的是二级标题我也是二级标题 内容斜体xieti粗体粗体粗斜体删除线 带下划线文 [^要注明的文字]注明的文章 创建标注 [^标注] 第一项 第二项 第一项 第一项 第一项: 第一项的第一个元素 第二项 第二项内容 区块引用 第一程嵌套 第二程嵌套区块链使用链表 第一项 第二项 第一项 区块嵌套 12print(&quot;hello world&quot;);return 0; githubhttp://github.com/Abruptrainlover[Goole] [1] | 表头 | 表头 || —- | —- || 单元格 | 单元格 || 单元格 | 单元格 || 左对齐 | 右对齐 | 居中对齐 || :—–| —-: | :—-: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 |使用 Ctrl+Alt+Del 重启电脑文本加粗** 正常显示星号 **\\ 反斜线` 反引号 星号_ 下划线{} 花括号[] 方括号() 小括号井字号 加号 减号. 英文句点! 感叹号$…$ 或者 (…) 中的数学表达式将会在行内显示。$$…$$ 或者 […] 或者 ```math 中的数学表达式将会在块内显示。 $$\\begin{Bmatrix} a &amp; b \\ c &amp; d\\end{Bmatrix}$$$$\\begin{CD} A @&gt;a&gt;&gt; B \\@VbVV @AAcA \\ C @= D\\end{CD}$$ 123456graph LRA[方形] --&gt;B(圆角) B --&gt; C&#123;条件a&#125; C --&gt;|a=1| D[结果1] C --&gt;|a=2| E[结果2] F[横向流程图] 123456graph LRA[方形] --&gt;B(圆角) B --&gt; C&#123;条件a&#125; C --&gt;|a=1| D[结果1] C --&gt;|a=2| E[结果2] F[横向流程图] 2、竖向流程图源码格式： 123456graph TDA[方形] --&gt; B(圆角) B --&gt; C&#123;条件a&#125; C --&gt; |a=1| D[结果1] C --&gt; |a=2| E[结果2] F[竖向流程图] 3、标准流程图源码格式： 123456789st=&gt;start: 开始框op=&gt;operation: 处理框cond=&gt;condition: 判断框(是或否?)sub1=&gt;subroutine: 子流程io=&gt;inputoutput: 输入输出框e=&gt;end: 结束框st-&gt;op-&gt;condcond(yes)-&gt;io-&gt;econd(no)-&gt;sub1(right)-&gt;op 4、标准流程图源码格式（横向）： 123456789st=&gt;start: 开始框op=&gt;operation: 处理框cond=&gt;condition: 判断框(是或否?)sub1=&gt;subroutine: 子流程io=&gt;inputoutput: 输入输出框e=&gt;end: 结束框st(right)-&gt;op(right)-&gt;condcond(yes)-&gt;io(bottom)-&gt;econd(no)-&gt;sub1(right)-&gt;op 5、UML时序图源码样例： 12345对象A-&gt;对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B--&gt;对象A: 我很好(响应)对象A-&gt;对象B: 你真的好吗？ 6、UML时序图源码复杂样例： 1234567891011Title: 标题：复杂使用对象A-&gt;对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B--&gt;对象A: 我很好(响应)对象B-&gt;小三: 你好吗小三--&gt;&gt;对象A: 对象B找我了对象A-&gt;对象B: 你真的好吗？Note over 小三,对象B: 我们是朋友participant CNote right of C: 没人陪我玩 7、UML标准时序图样例： 123456789101112%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头 sequenceDiagram participant 张三 participant 李四 张三-&gt;王五: 王五你好吗？ loop 健康检查 王五-&gt;王五: 与疾病战斗 end Note right of 王五: 合理 食物 &lt;br/&gt;看医生... 李四--&gt;&gt;张三: 很好! 王五-&gt;李四: 你怎么样? 李四--&gt;王五: 很好! 8、甘特图样例： 12345678910111213141516171819%% 语法示例 gantt dateFormat YYYY-MM-DD title 软件开发甘特图 section 设计 需求 :done, des1, 2014-01-06,2014-01-08 原型 :active, des2, 2014-01-09, 3d UI设计 : des3, after des2, 5d 未来任务 : des4, after des3, 5d section 开发 学习准备理解需求 :crit, done, 2014-01-06,24h 设计框架 :crit, done, after des2, 2d 开发 :crit, active, 3d 未来任务 :crit, 5d 耍 :2d section 测试 功能测试 :active, a1, after des3, 3d 压力测试 :after a1 , 20h 测试报告 : 48h","categories":[{"name":"try","slug":"try","permalink":"http://abruptrainlover.io/categories/try/"}],"tags":[{"name":"try","slug":"try","permalink":"http://abruptrainlover.io/tags/try/"}]},{"title":"first","slug":"first","date":"2022-01-12T10:36:07.000Z","updated":"2022-01-18T12:41:30.559Z","comments":true,"path":"2022/01/12/first/","link":"","permalink":"http://abruptrainlover.io/2022/01/12/first/","excerpt":"$$\\ lim _{x \\to \\infty} \\exp(-x)=0$$ 我是标题","text":"$$\\ lim _{x \\to \\infty} \\exp(-x)=0$$ 我是标题 我还是个标题1234int main(void)&#123; print(&quot;Hello world.&quot;); return 0;&#125; $$586-9333$$ 是个标题 我还是个标题 我还是标题 ajfk [^芜湖]: []: fnfjka dsfjkjk $$\\begin{align*}y = y(x,t) &amp;= A e^{i\\theta} \\&amp;= A (\\cos \\theta + i \\sin \\theta) \\&amp;= A (\\cos(kx - \\omega t) + i \\sin(kx - \\omega t)) \\&amp;= A\\cos(kx - \\omega t) + i A\\sin(kx - \\omega t) \\&amp;= A\\cos \\Big(\\frac{2\\pi}{\\lambda}x - \\frac{2\\pi v}{\\lambda} t \\Big) + i A\\sin \\Big(\\frac{2\\pi}{\\lambda}x - \\frac{2\\pi v}{\\lambda} t \\Big) \\&amp;= A\\cos \\frac{2\\pi}{\\lambda} (x - v t) + i A\\sin \\frac{2\\pi}{\\lambda} (x - v t)\\end{align*}$$ $ \\ lim _{x \\to \\infty} \\exp(-x)=0$ $$ \\def\\bold#1 \\bold{this\\ is\\ now\\ bold}$$\\def\\bold#1 \\bold{this\\ is\\ now\\ bold}$$$$","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-01-12T10:33:18.457Z","updated":"2022-01-18T09:59:27.484Z","comments":true,"path":"2022/01/12/hello-world/","link":"","permalink":"http://abruptrainlover.io/2022/01/12/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"new","slug":"new","permalink":"http://abruptrainlover.io/categories/new/"}],"tags":[{"name":"new","slug":"new","permalink":"http://abruptrainlover.io/tags/new/"}]}],"categories":[{"name":"try","slug":"try","permalink":"http://abruptrainlover.io/categories/try/"},{"name":"new","slug":"new","permalink":"http://abruptrainlover.io/categories/new/"}],"tags":[{"name":"try","slug":"try","permalink":"http://abruptrainlover.io/tags/try/"},{"name":"new","slug":"new","permalink":"http://abruptrainlover.io/tags/new/"}]}